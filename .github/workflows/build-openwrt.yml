name: Build app for OpenWrt

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # Step 3: Install dependencies (yq, python packages)
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y curl python3-pip jq
        python3 -m pip install --upgrade pip
        pip install pyyaml

        # Install yq
        YQ_URL="https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64"
        curl -LO "$YQ_URL"
        sudo chmod +x yq_linux_amd64
        sudo mv yq_linux_amd64 /usr/local/bin/yq

    # Step 4: Clone repository and prepare .config
    - name: Clone repository and prepare .config
      run: |
        REPO_URL=$(yq eval '.repository_url' ${GITHUB_WORKSPACE}/config.yaml)
        git clone $REPO_URL openwrt
        
        # Prepare .config for each architecture
        ARCHITECTURES=$(yq eval '.architectures' ${GITHUB_WORKSPACE}/config.yaml)
        for ARCH in $(echo $ARCHITECTURES | jq -r '.[]'); do
          echo "Building for architecture: $ARCH"
          # Update .config with the selected architecture
          echo "CONFIG_TARGET_$ARCH=y" >> openwrt/.config
          
          # Create the .config file based on config.yaml
          python3 ${GITHUB_WORKSPACE}/scripts/generate_config_from_yaml.py ${GITHUB_WORKSPACE}/config.yaml ${GITHUB_WORKSPACE}/openwrt/.config

          # Step 5: Build the package for this architecture
          cd openwrt
          make package/${PACKAGE_NAME}/compile V=s
          cd ..
        done

    # Step 6: Upload the generated ipk as artifact
    - name: Upload ipk as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ipk-artifact
        path: openwrt/bin/packages/*/*.ipk
